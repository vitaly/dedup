#!/bin/bash

function die() { echo "$@"; exit 1; }

function usage()
{
  cat <<END
Usage:
dedup index INDEX DIRECTORY [...]           - index files in DIRECTORY(IES), store index in INDEX
  dedup find DIRECTORY INDEX [...]          - print duplicated files in DIRECTORY according to INDEX(ES)
  dedup move FROM TO INDEX [...]            - move duplicates from FROM to TO according to INDEX(ES)
END
  exit
}

function index()
{
  [ -z "$1" -o -z "$2" ] && usage

  local index="$1"; shift

  [ -e "$index" ] && die "$index already exists"

  md5deep -o f -r "$@" > "$index"
}

function parse() {
  for a in "$@"; do
    if [ '-0' == "$a" ]; then
      echo "$a"
    else
      [ -f "$a" ] || die "'$a' is not a file"
      echo -m "$a"
    fi
  done
}

function find_dups()
{
  [ "$#" -lt 2 ] && usage

  local directory="$1"; shift

  [ -d "$directory" ] || die "$directory is not a directory"

  local args=$(parse "$@")

  (set -x; md5deep -o f -rl $args $directory)
}

function move_dups()
{
  [ "$#" -lt 3 ] && usage

  local from="$1"; shift
  local to="$1"; shift

  [ ! -d "$from" ] && die "'$from' is not a directory"

  [ ! -e "$to" ] && mkdir "$to"
  [ ! -d "$to" ] && die "'$to' is not a directory"

  find_dups "$from" "$@" |\
    while read f; do
      mkdir -vp "$to/$(dirname "$f")"
      mv -v "$f" "$to/$f"
    done
}


cmd="$1"; shift
case "$cmd" in
  index) index "$@";;
  find) find_dups "$@";;
  move) move_dups "$@";;
  *) usage;;
esac
