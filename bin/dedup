#!/bin/bash

function die() { echo "$@"; exit 1; }

function usage()
{
  cat <<END
Usage:
  dedup index INDEX DIRECTORY [...]
  dedup find DIRECTORY INDEX [...]
  dedup move FROM TO INDEX [...]
END
  exit
}

function index()
{
  [ -z "$1" -o -z "$2" ] && usage

  local index="$1"; shift

  [ -e "$index" ] && die "$index already exists"

  md5deep -o f -r "$@" > "$index"
}

function parse() {
  for a in "$@"; do
    if [ '-0' == "$a" ]; then
      echo "$a"
    else
      [ -f "$a" ] || die "'$a' is not a file"
      echo -m "$a"
    fi
  done
}

function find_dups()
{
  [ "$#" -lt 2 ] && usage

  local directory="$1"; shift

  [ -d "$directory" ] || die "$directory is not a directory"

  local args=$(parse "$@")

  md5deep -o f -rl $args $directory
}

function move_dups()
{
  [ "$#" -lt 2 ] && usage

  local from="$1"; shift
  local to="$1"; shift

  [ ! -d "$from" ] && die "'$from' is not a directory"

  [ ! -e "$to" ] && mkdir "$to"
  [ ! -d "$to" ] && die "'$to' is not a directory"

  #from=$(cd "$from";pwd)
  #to=$(cd "$to";pwd)

  #echo from: $from
  #echo to: $to

  find_dups "$from" "$@" -0 | xargs -0 -n1 dirname | uniq | xargs -I {} mkdir -p "$to/{}"

  find_dups "$from" "$@" -0 | xargs -0 -I {} mv "{}" "$to/{}"
}


cmd="$1"; shift
case "$cmd" in
  index) index "$@";;
  find) find_dups "$@";;
  move) move_dups "$@";;
  *) usage;;
esac
